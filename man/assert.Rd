% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert.R
\name{assert}
\alias{assert}
\alias{assert_any}
\alias{assert_all}
\title{Flexible Error Assertion}
\usage{
assert(
  ...,
  message = NULL,
  class = NULL,
  data = NULL,
  trace = NULL,
  parent = NULL,
  reduce = base::all
)

assert_all(
  ...,
  message = NULL,
  class = NULL,
  data = NULL,
  trace = NULL,
  parent = NULL
)

assert_any(
  ...,
  message = NULL,
  class = NULL,
  data = NULL,
  trace = NULL,
  parent = NULL
)
}
\arguments{
\item{...}{Unnamed expressions that describe the conditions to be tested}

\item{message}{The message to display. Character vectors are
formatted with \code{\link[rlang:format_error_bullets]{format_error_bullets()}}. The first element
defines a message header and the rest of the vector defines
bullets. Bullets named \code{i} and \code{x} define info and error bullets
respectively, with special Unicode and colour formatting applied
if possible.

If a message is not supplied, it is expected that the message is
generated lazily through \link[rlang:cnd_message]{conditionMessage()}. In
that case, \code{class} must be supplied. Only \code{inform()} allows empty
messages as it is occasionally useful to build user output
incrementally.}

\item{class}{Subclass of the condition. This allows your users
to selectively handle the conditions signalled by your functions.}

\item{data}{Additional data to be stored in the condition object}

\item{trace}{A \code{trace} object created by \code{\link[rlang:trace_back]{trace_back()}}.}

\item{parent}{A parent condition object created by \code{\link[rlang:abort]{abort()}}.}

\item{reduce}{A function that takes a vector of logical values as an argument
and returns a single logical value. \code{reduce} is given the results of the
expressions in \code{...} and decides whether the assertion passed or failed.
The default is \code{\link[base:all]{all()}} (i.e. all expressions must
be \code{TRUE}), but any function that meets the criteria above is acceptable.}
}
\value{
\code{TRUE} if the assertions evaluate to \code{TRUE}, otherwise an error
condition
}
\description{
\code{assert_all()} and \code{assert_any()} are functions that require all or any of
the expressions in \code{...} to be \code{TRUE}. They are more flexible versions of
\code{\link[base:stopifnot]{stopifnot()}} that also provide the conditioning
system benefits of \code{\link[rlang:abort]{abort()}}. They are powered
(and generalized) by \code{assert()}.
}
\details{
\code{assert()} evaluates logical expressions and throws an error if the
conditions specified by \code{reduce} are not met. It allows any combination of
logical conditions (not just "all \code{TRUE}" or "any \code{TRUE}") and provides the
conditioning system benefits of \code{\link[rlang:abort]{abort()}}.
}
