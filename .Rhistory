data
data %>%
select(patient_city, event_date, cases) %>%
pivot_wider(names_from = patient_city, values_from = cases)
ggplot(data, aes(x = event_date)) +
facet_wrap(vars(patient_city), ncol = 2, scales = "free_y") +
ggiraph::geom_area_interactive(aes(y = avg_cases, color = patient_city, fill = patient_city), show.legend = FALSE, alpha = 0.5) +
ggiraph::geom_point_interactive(aes(y = cases, color = patient_city, tooltip = cases), show.legend = F, alpha = 0.25, shape = 1) +
labs(
title = "Case Counts by Specimen Collection Date for Each Municipality",
subtitle = "7-Day Moving Average with Raw Data Points",
caption = "Data Source: National Electronics Disease Surveillance System (NEDSS)"
) +
xlab("Date") +
ylab("Case Count") +
theme(
plot.title = element_text(size = 16),
axis.title = element_text(size = 12)
)
data %>%
group_by(patient_city) %>%
filter(event_date < "2020-07-01") %>%
summarize(pre_avg = mean(cases, na.rm = TRUE)) ->
std_avg
data %>%
merge(y = std_avg, all.x = T) %>%
as_tibble() %>%
mutate(pct_chg = 100*cases/pre_avg) %>%
group_by(patient_city) %>%
summarize(event_date, cases, pct_chg,
s_pct_chg = 100*smoother::smth.gaussian(cases, window = 14, alpha = 1.96, tails = TRUE)/pre_avg - 100) %>%
filter(event_date >= "2020-07-01") ->
data_2
ggplot(data_2, aes(x = event_date)) +
facet_grid(vars(patient_city)) +
geom_tile(aes(y = 1, fill = s_pct_chg)) +
scale_y_continuous(breaks = NULL) +
scale_fill_viridis_c(name = "Percent Change\nfrom Baseline", option = "A") +
ggtitle("Cases in 5-18 Year Olds by Municipality (Standardized by Pre-July Average)")
devtools::load_all(".")
download_ael()
replace_ael()
check_ael()
format(Sys.Date(), "%d%b%y")
ed_total_url <- paste0(
"https://essence.tn.gov/tn_state/api/timeSeries", "?",
"datasource=va_hosp&percentParam=noPercent", "&",
"geographySystem=hospital", "&",
"publicHealthRegionByHospital=memphis-shelby", "&",
"medicalGroupingSystem=essencesyndromes", "&",
"timeResolution=daily", "&",
"detector=probrepswitch", "&",
"stratVal=", "&",
"multiStratVal=", "&",
"graphOnly=true", "&",
"numSeries=0", "&",
"graphOptions=multipleSmall", "&",
"seriesPerYear=false", "&",
"startMonth=March", "&",
"nonZeroComposite=false", "&",
"startDate=01Mar20", "&",
"endDate=", format(Sys.Date(), "%d%b%y")
)
RCurl::getURLContent(ed_total_url)
RCurl::getURL(ed_total_url)
download_nbs()
essence_ts_uri <- "https://essence.tn.gov/tn_state/api/timeSeries"
?httr::GET
httr::POST(
url = essence_ts_uri,
body = ed_total_params,
httr::authenticate("jsmith", "B0bbed_mulch_Opal_starter!")
)
ed_total_params <- list(
datasource = "va_hosp",
percentParam = "noPercent",
geographySystem = "hospital",
publicHealthRegionByHospital = "memphis-shelby",
medicalGroupingSystem = "essencesyndromes",
timeResolution = "daily",
detector = "probrepswitch",
stratVal = "",
multiStratVal = "",
graphOnly = "true",
numSeries = "0",
graphOptions = "multipleSmall",
seriesPerYear = "false",
startMonth = "January",
nonZeroComposite = "false",
startDate = format(as.Date("2020-03-01"), "%d%b%y"),
endDate = format(Sys.Date(), "%d%b%y")
)
httr::POST(
url = essence_ts_uri,
body = ed_total_params,
httr::authenticate("jsmith", "B0bbed_mulch_Opal_starter!")
)
httr::POST(
url = essence_ts_uri,
body = ed_total_params
)
httr::GET(
url = essence_ts_uri,
body = ed_total_params
)
httr::GET(
url = essence_ts_uri,
body = ed_total_params,
username = "jsmith",
password = "B0bbed_mulch_Opal_starter!"
)
httr::POST(
url = essence_ts_uri,
body = ed_total_params,
username = "jsmith",
password = "B0bbed_mulch_Opal_starter!"
)
httr::GET(
url = essence_ts_uri,
params = ed_total_params,
username = "jsmith",
password = "B0bbed_mulch_Opal_starter!"
)
ed_total_params
ed_total_params %>% as.vector()
ed_total_params %>% purrr::as_vector()
ed_total_params %>% httr::build_url()
httr::GET(
url = ed_total_url,
username = "jsmith",
password = "B0bbed_mulch_Opal_starter!"
)
httr::GET(
url = ed_total_url
)
httr::GET(
url = "https://essence.tn.gov/tn_state/api/timeSeries?datasource=va_hosp&percentParam=noPercent&geographySystem=hospital&publicHealthRegionByHospital=memphis-shelby&medicalGroupingSystem=essencesyndromes&timeResolution=daily&detector=probrepswitch&stratVal=&multiStratVal=&graphOnly=true&numSeries=0&graphOptions=multipleSmall&seriesPerYear=false&startMonth=January&nonZeroComposite=false&startDate=25Jun20&endDate=23Sep20"
)
httr::POST(
url = "https://essence.tn.gov/tn_state/api/timeSeries?datasource=va_hosp&percentParam=noPercent&geographySystem=hospital&publicHealthRegionByHospital=memphis-shelby&medicalGroupingSystem=essencesyndromes&timeResolution=daily&detector=probrepswitch&stratVal=&multiStratVal=&graphOnly=true&numSeries=0&graphOptions=multipleSmall&seriesPerYear=false&startMonth=January&nonZeroComposite=false&startDate=25Jun20&endDate=23Sep20"
)
httr::POST(
url = "https://essence.tn.gov/tn_state/api/timeSeries",
params = "datasource=va_hosp&percentParam=noPercent&geographySystem=hospital&publicHealthRegionByHospital=memphis-shelby&medicalGroupingSystem=essencesyndromes&timeResolution=daily&detector=probrepswitch&stratVal=&multiStratVal=&graphOnly=true&numSeries=0&graphOptions=multipleSmall&seriesPerYear=false&startMonth=January&nonZeroComposite=false&startDate=25Jun20&endDate=23Sep20"
)
httr::GET(
url = "https://essence.tn.gov/tn_state/api/timeSeries",
params = "datasource=va_hosp&percentParam=noPercent&geographySystem=hospital&publicHealthRegionByHospital=memphis-shelby&medicalGroupingSystem=essencesyndromes&timeResolution=daily&detector=probrepswitch&stratVal=&multiStratVal=&graphOnly=true&numSeries=0&graphOptions=multipleSmall&seriesPerYear=false&startMonth=January&nonZeroComposite=false&startDate=25Jun20&endDate=23Sep20"
)
httr::GET(
url = "https://essence.tn.gov/tn_state/api/timeSeries",
params = "datasource=va_hosp&percentParam=noPercent&geographySystem=hospital&publicHealthRegionByHospital=memphis-shelby&medicalGroupingSystem=essencesyndromes&timeResolution=daily&detector=probrepswitch&stratVal=&multiStratVal=&graphOnly=true&numSeries=0&graphOptions=multipleSmall&seriesPerYear=false&startMonth=January&nonZeroComposite=false&startDate=25Jun20&endDate=23Sep20",
username = "jsmith",
password = "B0bbed_mulch_Opal_starter!"
)
httr::GET(
url = "https://essence.tn.gov/tn_state/api/timeSeries",
params = "datasource=va_hosp&percentParam=noPercent&geographySystem=hospital&publicHealthRegionByHospital=memphis-shelby&medicalGroupingSystem=essencesyndromes&timeResolution=daily&detector=probrepswitch&stratVal=&multiStratVal=&graphOnly=true&numSeries=0&graphOptions=multipleSmall&seriesPerYear=false&startMonth=January&nonZeroComposite=false&startDate=25Jun20&endDate=23Sep20",
httr::authenticate(username = "jsmith",
password = "B0bbed_mulch_Opal_starter!")
)
httr::GET(
url = "https://essence.tn.gov/tn_state/api/timeSeries",
params = "datasource=va_hosp&percentParam=noPercent&geographySystem=hospital&publicHealthRegionByHospital=memphis-shelby&medicalGroupingSystem=essencesyndromes&timeResolution=daily&detector=probrepswitch&stratVal=&multiStratVal=&graphOnly=true&numSeries=0&graphOptions=multipleSmall&seriesPerYear=false&startMonth=January&nonZeroComposite=false&startDate=25Jun20&endDate=23Sep20",
httr::authenticate("jsmith","B0bbed_mulch_Opal_starter!")
)
httr::GET(
url = "https://essence.tn.gov/tn_state/api/timeSeries?datasource=va_hosp&percentParam=noPercent&geographySystem=hospital&publicHealthRegionByHospital=memphis-shelby&medicalGroupingSystem=essencesyndromes&timeResolution=daily&detector=probrepswitch&stratVal=&multiStratVal=&graphOnly=true&numSeries=0&graphOptions=multipleSmall&seriesPerYear=false&startMonth=January&nonZeroComposite=false&startDate=25Jun20&endDate=23Sep20",
httr::authenticate("jsmith","B0bbed_mulch_Opal_starter!")
)
?httr::build_url
httr::GET(
url = ed_total_url,
httr::authenticate("jsmith","B0bbed_mulch_Opal_starter!")
)
httr::parse_url(ed_total_url)
httr::GET(
url = ed_total_url,
query = ed_total_params,
httr::authenticate("jsmith","B0bbed_mulch_Opal_starter!")
)
httr::GET(
url = essence_ts_uri,
query = ed_total_params,
httr::authenticate("jsmith","B0bbed_mulch_Opal_starter!")
)
download_nbs()
httr::GET(
url = essence_ts_uri,
query = ed_total_params,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
ed_total_url <- paste0(
"https://essence.tn.gov/tn_state/api/timeSeries", "?",
"datasource=va_hosp&percentParam=noPercent", "&",
"geographySystem=hospital", "&",
"publicHealthRegionByHospital=memphis-shelby", "&",
"medicalGroupingSystem=essencesyndromes", "&",
"timeResolution=daily", "&",
"detector=probrepswitch", "&",
"stratVal=", "&",
"multiStratVal=", "&",
"graphOnly=true", "&",
"numSeries=0", "&",
"graphOptions=multipleSmall", "&",
"seriesPerYear=false", "&",
"startMonth=January", "&",
"nonZeroComposite=false", "&",
"startDate=01Mar20", "&",
"endDate=", format(Sys.Date(), "%d%b%y")
)
essence_ts_uri <- "https://essence.tn.gov/tn_state/api/timeSeries"
ed_total_params <- list(
datasource = "va_hosp",
percentParam = "noPercent",
geographySystem = "hospital",
publicHealthRegionByHospital = "memphis-shelby",
medicalGroupingSystem = "essencesyndromes",
timeResolution = "daily",
detector = "probrepswitch",
stratVal = "",
multiStratVal = "",
graphOnly = "true",
numSeries = "0",
graphOptions = "multipleSmall",
seriesPerYear = "false",
startMonth = "January",
nonZeroComposite = "false",
startDate = format(as.Date("2020-03-01"), "%d%b%y"),
endDate = format(Sys.Date(), "%d%b%y")
)
httr::GET(
url = essence_ts_uri,
query = ed_total_params,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
httr::POST(
url = essence_ts_uri,
query = ed_total_params,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(type = "text")
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) magrittr::`%>%`
import::from(magrittr, `%>%`)
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(type = "text")
# Total ED Visit Query
ed_total_query <- list(
datasource = "va_hosp",
percentParam = "noPercent",
geographySystem = "hospital",
publicHealthRegionByHospital = "memphis-shelby",
medicalGroupingSystem = "essencesyndromes",
timeResolution = "daily",
detector = "probrepswitch",
stratVal = "",
multiStratVal = "",
graphOnly = "true",
numSeries = "0",
graphOptions = "multipleSmall",
seriesPerYear = "false",
startMonth = "January",
nonZeroComposite = "false",
startDate = format(as.Date("2020-03-01"), "%d%b%y"),
endDate = format(Sys.Date(), "%d%b%y")
)
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(type = "text")
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(type = "parsed")
?httr::content
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text")
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "parsed")
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON()
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
as_tibble()
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
tibble::as_tibble()
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
tibble::as_tibble() %>%
colnames()
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
tibble::as_tibble() %>%
select(timeSeriesData)
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
tibble::as_tibble() %>%
dplyr::select(timeSeriesData)
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
tibble::as_tibble() %>%
dplyr::select(timeSeriesData) %>%
.[[1]]
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
tibble::as_tibble() %>%
dplyr::select(timeSeriesData) %>%
.[[1]] %>%
tibble::as_tibble()
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
.[[2]] %>%
tibble::as_tibble()
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
.[["timeSeriesData"]] %>%
tibble::as_tibble()
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
dplyr::select(timeSeriesData) %>%
tibble::as_tibble() %>%
dplyr::mutate(
date = as.Date(date),
count = as.integer(count)
)
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
.[["timeSeriesData"]] %>%
tibble::as_tibble() %>%
dplyr::mutate(
date = as.Date(date),
count = as.integer(count)
)
httr::GET(
url = essence_ts_uri,
query = ed_total_query,
httr::authenticate(
user = Sys.getenv("essence_tn_usr"),
password = Sys.getenv("essence_tn_pwd")
)
) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
.[["timeSeriesData"]] %>%
tibble::as_tibble() %>%
dplyr::transmute(
date = as.Date(date),
count = as.integer(count)
)
devtools::load_all(".")
download_nbs()
install.packages("esquisse")
esquisse:::esquisser()
install.packages("ggedit")
