labs(
title = "Case Counts by Specimen Collection Date for Each Municipality",
subtitle = "7-Day Moving Average with Raw Data Points",
caption = "Data Source: National Electronics Disease Surveillance System (NEDSS)"
) +
xlab("Date") +
ylab("Case Count") +
theme(
plot.title = element_text(size = 16),
axis.title = element_text(size = 12)
)) %>%
{ggiraph::girafe(ggobj = .)}
(ggplot(data, aes(x = event_date)) +
facet_wrap(vars(patient_city), ncol = 2, scales = "free_y") +
ggiraph::geom_area_interactive(aes(y = avg_cases, color = patient_city, fill = patient_city, tooltip = round(avg_cases)), show.legend = FALSE, alpha = 0.5) +
ggiraph::geom_point_interactive(aes(y = cases, color = patient_city, tooltip = cases), show.legend = F, alpha = 0.25, shape = 1) +
labs(
title = "Case Counts by Specimen Collection Date for Each Municipality",
subtitle = "7-Day Moving Average with Raw Data Points",
caption = "Data Source: National Electronics Disease Surveillance System (NEDSS)"
) +
xlab("Date") +
ylab("Case Count") +
theme(
plot.title = element_text(size = 16),
axis.title = element_text(size = 12)
)) %>%
{ggiraph::girafe(ggobj = .)}
(ggplot(data, aes(x = event_date)) +
facet_wrap(vars(patient_city), ncol = 2, scales = "free_y") +
ggiraph::geom_area_interactive(aes(y = avg_cases, color = patient_city, fill = patient_city), show.legend = FALSE, alpha = 0.5) +
ggiraph::geom_point_interactive(aes(y = cases, color = patient_city, tooltip = cases), show.legend = F, alpha = 0.25, shape = 1) +
labs(
title = "Case Counts by Specimen Collection Date for Each Municipality",
subtitle = "7-Day Moving Average with Raw Data Points",
caption = "Data Source: National Electronics Disease Surveillance System (NEDSS)"
) +
xlab("Date") +
ylab("Case Count") +
theme(
plot.title = element_text(size = 16),
axis.title = element_text(size = 12)
)) %>%
{ggiraph::girafe(ggobj = .)}
ggplot(data, aes(x = event_date)) +
facet_wrap(vars(patient_city), ncol = 2, scales = "free_y") +
ggiraph::geom_area_interactive(aes(y = avg_cases, color = patient_city, fill = patient_city), show.legend = FALSE, alpha = 0.5) +
ggiraph::geom_point_interactive(aes(y = cases, color = patient_city, tooltip = cases), show.legend = F, alpha = 0.25, shape = 1) +
labs(
title = "Case Counts by Specimen Collection Date for Each Municipality",
subtitle = "7-Day Moving Average with Raw Data Points",
caption = "Data Source: National Electronics Disease Surveillance System (NEDSS)"
) +
xlab("Date") +
ylab("Case Count") +
theme(
plot.title = element_text(size = 16),
axis.title = element_text(size = 12)
)
devtools::load_all()
devtools::load_all(".")
download_ael()
replace_ael()
check_ael()
devtools::load_all(".")
check_ael()
devtools::load_all(".")
check_ael()
devtools::load_all(".")
check_ael()
?gt::data_color
devtools::load_all(".")
?gt::data_color
check_ael()
devtools::load_all(".")
check_ael()
devtools::load_all(".")
check_ael()
.Machine$integer.max %/% 100L
install.packages("dtplyr")
?dtplyr::lazy_dt
devtools::load_all(".")
check_ael()
devtools::load_all(".")
check_ael()
devtools::load_all(".")
check_ael()
devtools::load_all(".")
check_ael()
cars
cars %>% dtplyr::lazy_dt() %>% select(speed)
cars %>% dtplyr::lazy_dt() %>% dplyr::select(speed)
library(data.table)
check_ael()
install.packages("import")
import::from(magrittr, `%>%`)
devtools::load_all(".")
Sys.Date() %>% guess_dttm()
c(T,T,F)
c(T,T,F) %>% any()
NROW(seq(1,10))
binom.test(1, 10, p = 0)
binom.test(1, 1, p = 0)
binom.test(1, 100, p = 0)
binom.test(1, 10000, p = 0)
?poisson.test()
binom.test(1, 1e6, p = 0)
binom.test(1, 1e6, p = 0.1)
binom.test(1, 1e6, p = 0.5)
poisson.test(1, r = 0)
poisson.test(1, r = 0.01)
poisson.test(1, r = 0.01, alternative = "greter")
poisson.test(1, r = 0.01, alternative = "greater")
binom.test(1, 100, p = 0.01, alternative = "greater")
binom.test(1, 1000, p = 0.01, alternative = "greater")
binom.test(1, 10, p = 0.01, alternative = "greater")
binom.test(1, 5, p = 0.01, alternative = "greater")
binom.test(1, 5, p = 0.1, alternative = "greater")
binom.test(1, 5, p = 3.4e-6, alternative = "greater")
binom.test(1, 2, p = 3.4e-6, alternative = "greater")
binom.test(1, 2, p = 0.01, alternative = "greater")
pbeta(0.025, shape1 = 1, shape2 = 2)
pbeta(1 - 0.025, shape1 = 1, shape2 = 2)
pbeta(1 - 0.025, shape1 = 1, shape2 = 100)
pbeta(0.025, shape1 = 1, shape2 = 100)
pbeta(0.025, shape1 = 1, shape2 = 1000)
pbeta(0.025, shape1 = 1, shape2 = 100)
1 - pbeta(0.025, shape1 = 1, shape2 = 100)
1 - pbeta(0.025, shape1 = 1, shape2 = 200)
1 - pbeta(0.05, shape1 = 1, shape2 = 200)
1 - pbeta(0.05, shape1 = 1, shape2 = 1)
qbeta(0.05, shape1 = 1, shape2 = 1)
qbeta(0.05, shape1 = 1, shape2 = 2)
qbeta(0.05, shape1 = 2, shape2 = 2)
qbeta(0.05, shape1 = 1, shape2 = 2)
qbeta(0.5, shape1 = 1, shape2 = 2)
pbeta(0.5, shape1 = 1, shape2 = 2)
pbeta(0.5, shape1 = 2, shape2 = 2)
pbeta(0.5, shape1 = 2, shape2 = 4)
pbeta(0.05, shape1 = 2, shape2 = 4)
pbeta(0.05, shape1 = 2, shape2 = 10)
pbeta(0.05, shape1 = 1, shape2 = 10)
qbinom(0.05, 100, 1)
qbinom(0.05, 100, 0.01)
qbinom(0.05, 100, 0.001)
pbinom(2, 10, 0.001)
pbinom(2, 10, 0.0001)
pbinom(2, 10, 0.1)
pbinom(2, 10, 0.5)
pbinom(2, 10, 1e-6)
pbinom(1, 10, 1e-6)
pbinom(1, 100, 1e-6)
pbinom(0, 100, 1e-6)
pbinom(0, 100, 0.1)
pbinom(1, 100, 0.1)
binom.test(1, 100, p = 1e-3, alternative = "greater")
binom.test(1, 100, p = 1e-6, alternative = "greater")
binom.test(1, 10, p = 1e-6, alternative = "greater")
binom.test(1, 100000, p = 1e-6, alternative = "greater")
pnorm(6)
pnorm(6, mean = 0, sd = 1)
binom.test(1, 100000, p = 1e-6, alternative = "greater")
binom.test(1, 100000, p = 1e-6, alternative = "greater") %>% .$p.value
binom.test(1, 100000, p = 1e-2, alternative = "greater") %>% .$p.value
binom.test(1, 100000, p = 1e-2, alternative = "less") %>% .$p.value
binom.test(1, 100000, p = 1e-2, alternative = "less")
binom.test(1, 100000, p = 1e-2, alternative = "greater")
binom.test(1, 100, p = 1e-2, alternative = "greater")
binom.test(1, 10, p = 1e-2, alternative = "greater")
binom.test(1, 1000, p = 1e-3, alternative = "greater")
binom.test(1, 100, p = 1e-3, alternative = "greater")
binom.test(1, 100, p = 1e-6, alternative = "greater")
guess_dttm(as.Date("2020-09-01"))
devtools::load_all(".")
?all.equal
devtools::load_all(".")
download_ael()
replace_ael()
devtools::load_all(".")
replace_ael()
devtools::load_all(".")
replace_ael()
devtools::load_all(".")
replace_ael()
devtools::load_all(".")
replace_ael()
check_ael()
lubridate::as_datetime()
?lubridate::as_datetime()
readxl::read_xlsx(
path = "V:/EPI DATA ANALYTICS TEAM/COVID SANDBOX REDCAP DATA/COVID CASES_MAYORS DATA REQUEST/Positives09152020/Positives_9-15.xlsx",
)
readxl::read_xlsx(
path = "V:/EPI DATA ANALYTICS TEAM/COVID SANDBOX REDCAP DATA/COVID CASES_MAYORS DATA REQUEST/Positives09152020/Positives_9-15.xlsx",
) %>%
select(INV_START_DT) %>%
.[[1]] %>%
typeof()
mayor_data %>%
dplyr::select(INV_START_DT) %>%
.[[1]] %>%
typeof()
readxl::read_xlsx(
path = "V:/EPI DATA ANALYTICS TEAM/COVID SANDBOX REDCAP DATA/COVID CASES_MAYORS DATA REQUEST/Positives09152020/Positives_9-15.xlsx",
) ->
mayor_data
mayor_data %>%
dplyr::select(INV_START_DT) %>%
.[[1]] %>%
typeof()
mayor_data %>%
dplyr::select(INV_START_DT) %>%
.[[1]]
mayor_data %>%
dplyr::select(INV_START_DT) %>%
.[[1]] %>%
lubridate::is.POSIXct()
mayor_data %>%
dplyr::select(INV_START_DT) %>%
.[[1]] %>%
lubridate::is.POSIXlt()
devtools::load_all(".")
library(jsonlite)
library(httr)
library(tidyverse)
library(lubridate)
API_url <- "https://redcap.health.tn.gov/redcap/api/";
#Setting API settings
API_Export_Settings <- list(
content = "generateNextRecordName",
#format = "json",
#type = "flat",
#exportDataAccessGroups = "true",
token = Sys.getenv("redcap_api_token"))
#Calling API, running import
redcap_export_response <- POST(API_url, body=API_Export_Settings)
View(redcap_export_response)
redcap_json <- content(redcap_export_response, as = "text")
api_data <- fromJSON(redcap_json, simplifyDataFrame = TRUE)
api_data
#Setting API settings
API_Export_Settings <- list(
content = "record",
format = "json",
type = "flat",
exportDataAccessGroups = "true",
token = Sys.getenv("redcap_api_token"))
#Calling API, running import
redcap_export_response <- POST(API_url, body=API_Export_Settings)
redcap_json <- content(redcap_export_response, as = "text")
api_data <- fromJSON(redcap_json, simplifyDataFrame = TRUE)
api_data
#Setting API settings
API_Export_Settings <- list(
token = Sys.getenv("redcap_api_token"),
content = "record",
format = "json",
type = "flat",
records = "MSR",
fields = "date_updated"
)
#Calling API, running import
redcap_export_response <- POST(API_url, body=API_Export_Settings)
redcap_json <- content(redcap_export_response, as = "text")
api_data <- fromJSON(redcap_json, simplifyDataFrame = TRUE)
View(api_data)
api_data
api_data %>% as_tibble()
#Calling API, running import
POST(API_url, body = API_Export_Settings) %>%
content(as = "text") %>%
fromJSON(simplifyVector = TRUE)
#Calling API, running import
POST(API_url, body = API_Export_Settings) %>%
content(as = "text") %>%
fromJSON(simplifyVector = TRUE) %>%
as_vector()
#Calling API, running import
httr::POST(API_url, body = API_Export_Settings) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON(simplifyVector = TRUE) %>%
as.vector()
#Calling API, running import
httr::POST(API_url, body = API_Export_Settings) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON(simplifyVector = TRUE) %>%
purrr::as_vector()
#Calling API, running import
httr::POST(API_url, body = API_Export_Settings) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON(simplifyVector = TRUE) %>%
purrr::as_vector() %>%
lubridate::as_date()
?httr::content()
#Calling API, running import
httr::POST(API_url, body = API_Export_Settings) %>%
httr::content(as = "raw")
#Calling API, running import
httr::POST(API_url, body = API_Export_Settings) %>%
httr::content(as = "parsed")
#Calling API, running import
httr::POST(API_url, body = API_Export_Settings) %>%
httr::content(as = "text")
#Setting general API parameters
api_params <- list(
token = Sys.getenv("redcap_api_token"),
content = "record",
format = "json",
type = "flat",
records = "MSR"
)
api_params %>% append(fields = "date_updated")
api_params %>% append("date_updated")
api_params %>% c(.,fields = "date_updated")
# Base URI
api_uri <- "https://redcap.health.tn.gov/redcap/api/";
rtn_format <- "json"
api_token <- Sys.getenv("redcap_api_token")
# Add field to get date updated
api_date_params <- list(
token        = api_token,
content      = "record",
format       = "json",
type         = "flat",
records      = "MSR",
fields       = "date_updated",
forms        = "nbs_data_for_regions",
returnFormat = rtn_format
)
# Add form to get investigations data
api_inv_params <- list(
token        = api_token,
content      = "file",
action       = "export",
record       = "MSR",
field        = "nbs_daily_upload",
returnFormat = rtn_format
)
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON(simplifyVector = TRUE) %>%
purrr::as_vector() %>%
lubridate::as_date()
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "text")
# Add field to get date updated
api_date_params <- list(
token        = api_token,
content      = "record",
format       = "json",
type         = "flat",
records      = "MSR",
fields       = "date_updated",
returnFormat = rtn_format
)
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "text")
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON()
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
purrr::as_vector()
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
purrr::as_vector() %>%
lubridate::as_date()
# Add form to get investigations data
api_nbs_params <- list(
token        = api_token,
content      = "file",
action       = "export",
record       = "MSR",
field        = "nbs_daily_upload",
returnFormat = rtn_format
)
# Downloading most recent investigations file
httr::POST(api_uri, body = api_nbs_params) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON(simplifyDataFrame = TRUE) ->
nbs
?httr::POST
rlang::trace_back()
rlang::last_error()
# Downloading most recent investigations file
httr::POST(api_uri, body = api_nbs_params) -> raw_nbs
?httr::content
raw_nbs %>%
httr::content(as = "text")
raw_nbs %>%
httr::content(as = "text")
raw_nbs %>%
httr::content(as = "text") %>%
jsonlite::fromJSON(simplifyDataFrame = TRUE)
View(raw_nbs)
raw_nbs %>%
httr::content(as = "raw")
raw_nbs %>%
httr::content(as = "parsed")
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "raw") %>%
jsonlite::fromJSON()
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "raw")
?httr::POST()
?httr::GET
# Downloading most recent investigations file
httr::POST(
api_uri,
body = api_nbs_params,
httr::write_disk("nbs.zip"),
httr::progress()
)
unzip("nbs.zip")
raw_nbs %>% httr::content()
raw_nbs %>% httr::content() %>% rawToChar()
raw_nbs %>% httr::content(as = "text")
raw_nbs %>% httr::content(as = "raw") %>% rawToBits()
raw_nbs %>% httr::content(as = "raw") %>% readBin()
raw_nbs %>% httr::content(as = "raw") %>% rawToChar()
raw_nbs %>% httr::content(as = "raw") %>% writeBin(con = file("nbs.zip", "wb"))
unzip("nbs.zip")
raw_nbs %>% httr::content(as = "raw") %>% rawToBits() %>% writeBin(con = file("nbs.zip", "wb"))
unzip("nbs.zip")
# Downloading most recent investigations file
httr::POST(
api_uri,
body = api_nbs_params,
httr::write_disk("nbs_write_disk.zip"),
httr::progress()
)
?file()
unzip("nbs_write_disk.zip")
read_csv("MSR INVS.csv")
?unzip
# Create temporary directory for new files
?dir.create
# Create temporary directory for new files
?dir.create("temp")
# Create temporary directory for new files
dir.create("temp")
# Create temporary directory for new files
dir.create("temp")
files <- list.files("temp")
if (length(files) == 0) TRUE
# Create temporary directory for new files
if (!dir.exists("temp")) {
dir.create("temp")
} else {
files <- list.files("temp")
if (length(files) != 0) file.remove(list(files))
}
library(jsonlite)
library(httr)
library(tidyverse)
library(lubridate)
# Base URI
api_uri <- "https://redcap.health.tn.gov/redcap/api/";
api_token <- Sys.getenv("redcap_api_token")
# General API parameters
api_params <- list(
token = api_token
)
# Add field to get date updated
api_date_params <- list(
token        = api_token,
content      = "record",
format       = "json",
type         = "flat",
records      = "MSR",
fields       = "date_updated",
returnFormat = "json"
)
# Add form to get investigations data
api_nbs_params <- list(
token        = api_token,
content      = "file",
action       = "export",
record       = "MSR",
field        = "nbs_daily_upload",
returnFormat = "json"
)
# Checking date updated - no use downloading data we already have
httr::POST(api_uri, body = api_date_params) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON() %>%
purrr::as_vector() %>%
lubridate::as_date() ->
date_updated
# Create temporary directory for new files
if (!dir.exists("temp")) {
dir.create("temp")
} else {
files <- list.files("temp")
if (length(files) != 0) file.remove(list(files))
}
?file.rename
file.create("bob.txt")
file.rename("bob.txt", "temp/bob.txt")
?readr::read_csv
?data.table::fread()
?type_convert
